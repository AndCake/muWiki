// Generated by CoffeeScript 1.4.0
(function() {
  var currentPage, hashChange, input, pageHistory, pageHistoryModified, showdown, updateBreadcrumbs, uploadFiles;

  showdown = new Showdown.converter();

  currentPage = null;

  pageHistoryModified = false;

  pageHistory = null;

  window.save = function(editor) {
    var data;
    data = currentPage;
    $("#page").html(showdown.makeHtml(data));
    document.title = data.substr(0, data.indexOf("\n"));
    $("#page a").click(function() {
      event.preventDefault();
      if (this.href) {
        return location.hash = "#" + (this.href.replace(location.href.replace(/#.*$/g, ''), ''));
      }
    });
    return $.post("savePage.do?" + location.hash.replace(/^#/, ''), data);
  };

  window.addImg = function(editor, cm) {
    $("#fileEl").change(function(e) {
      return uploadFiles(this.files, cm);
    });
    return $("#fileEl").click();
  };

  window.addLink = function(editor) {
    var url;
    url = prompt("Please enter the Link's URL:");
    editor.getDoc().replaceSelection("[" + (editor.getDoc().getSelection() || "Link name") + "](" + url + ")", true);
    return editor.focus();
  };

  uploadFiles = function(files, cm) {
    var file, fr, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      fr = new FileReader();
      fr.onload = (function(file) {
        return function(event) {
          var xhr;
          if (event.loaded >= event.total) {
            xhr = new XMLHttpRequest();
            xhr.open("POST", "upload.do?" + file.name.replace(/[^a-zA-Z0-9_.-]/g, '-'));
            xhr.upload.addEventListener("progress", function(e) {
              if (e.lengthComputable) {
                return $("div.CodeMirror-gutter.CodeMirror-linenumbers").addClass("loading").css("height: " + (Math.round(e.loaded * 100 / e.total)) + "%;");
              }
            }, false);
            xhr.onreadystatechange = function(e) {
              if (xhr.readyState === 4 && xhr.status === 200) {
                $("div.CodeMirror-gutter.CodeMirror-linenumbers").removeClass("loading");
                cm.getDoc().replaceSelection("![" + (cm.getDoc().getSelection() || file.name) + "](" + (xhr.responseText.replace(/^\s+|\s+$/g, '')) + ")", true);
                return cm.focus();
              }
            };
            xhr.setRequestHeader("Content-Type", file.type);
            return xhr.send(event.target.result.substr(event.target.result.indexOf(",") + 1));
          }
        };
      })(file);
      _results.push(fr.readAsDataURL(file));
    }
    return _results;
  };

  window.editPage = function() {
    var editor, form, ta;
    form = document.createElement("form");
    ta = document.createElement("textarea");
    ta.id = "code";
    $(form).append("<div class='toolbar'><button class='save'></button><button class='addImg'></button><button class='addLink'></button><button class='history'></button></div>");
    form.appendChild(ta);
    $("#page").html(form.outerHTML);
    $("#code").val(currentPage);
    editor = CodeMirror.fromTextArea($("#code")[0], {
      mode: 'markdown',
      lineNumbers: true,
      autofocus: true,
      lineWrapping: true,
      theme: "default",
      extraKeys: {
        "Enter": "newlineAndIndentContinueMarkdownList"
      }
    });
    editor.on("change", function(doc, changed) {
      return currentPage = doc.getValue();
    });
    editor.on("drop", function(cm, event) {
      event.preventDefault();
      return uploadFiles(event.dataTransfer.files, cm);
    });
    return $(".toolbar button").click(function(e) {
      e.preventDefault();
      return window[this.className](editor, editor);
    });
  };

  updateBreadcrumbs = function() {
    var entry, i, link, _results;
    i = 0;
    $("#breadcrumbs").html("");
    _results = [];
    while (i < pageHistory.length) {
      entry = pageHistory[i];
      link = document.createElement("a");
      link.innerHTML = entry[1];
      link.href = entry[0];
      link.onclick = (function(id) {
        return function(event) {
          pageHistory = pageHistory.slice(0, id);
          return pageHistoryModified = true;
        };
      })(i);
      $("#breadcrumbs").append(link);
      _results.push(i++);
    }
    return _results;
  };

  hashChange = function() {
    var frags, path;
    $("body").addClass("loading");
    path = location.hash.replace(/^#/, '');
    frags = path.split(/\//);
    return $.get("getPage.do?" + path, function(data) {
      var title;
      $("body").removeClass("loading");
      title = data.substr(0, data.indexOf("\n"));
      if (!pageHistory) {
        pageHistory = [];
      } else if (!pageHistoryModified) {
        pageHistory.push(["" + currentHash, "" + document.title]);
      }
      pageHistoryModified = false;
      currentPage = data;
      $("#page").html(showdown.makeHtml(data));
      updateBreadcrumbs();
      document.title = title;
      window.currentHash = location.hash;
      return $("#page a").click(function(event) {
        event.preventDefault();
        if (this.href) {
          return location.hash = "#" + (this.href.replace(location.href.replace(/#.*$/g, ''), ''));
        }
      });
    });
  };

  input = document.createElement("input");

  input.type = "file";

  input.id = "fileEl";

  input.multiple = true;

  input.accept = "image/*";

  document.body.appendChild(input);

  input.style.display = "none";

  setInterval(function() {
    if (window.currentHash !== location.hash) {
      return hashChange();
    }
  }, 250);

}).call(this);
